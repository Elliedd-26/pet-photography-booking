using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using PetPhotographyApp.Data;
using PetPhotographyApp.Models;
using Microsoft.AspNetCore.Mvc.Rendering;

public class NotificationsPageController : Controller
{
    private readonly ApplicationDbContext _context;

    public NotificationsPageController(ApplicationDbContext context)
    {
        _context = context;
    }

    [HttpGet("")]
    public async Task<IActionResult> Index()
    {
        var notifications = await _context.Notifications
            .Include(n => n.RecipientOwner)
            .ToListAsync();
        return View(notifications);
    }

    [HttpGet("Details/{id}")]
    public async Task<IActionResult> Details(int id)
    {
        var notification = await _context.Notifications
            .Include(n => n.RecipientOwner)
            .FirstOrDefaultAsync(m => m.NotificationId == id);
        if (notification == null) return NotFound();
        return View(notification);
    }

    [HttpGet("Create")]
    public IActionResult Create()
    {
        ViewData["RecipientOwnerId"] = new SelectList(_context.Owners, "OwnerId", "Name");
        return View();
    }

    [HttpPost("Create")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Create([Bind("NotificationId,Title,Message,Type,IsRead,SentAt,RecipientOwnerId")] Notification notification)
    {
        if (ModelState.IsValid)
        {
            _context.Add(notification);
            await _context.SaveChangesAsync();
            return RedirectToAction("Index");
        }
        ViewData["RecipientOwnerId"] = new SelectList(_context.Owners, "OwnerId", "Name", notification.RecipientOwnerId);
        return View(notification);
    }

    [HttpGet("Edit/{id}")]
    public async Task<IActionResult> Edit(int id)
    {
        var notification = await _context.Notifications.FindAsync(id);
        if (notification == null) return NotFound();

        ViewData["RecipientOwnerId"] = new SelectList(_context.Owners, "OwnerId", "Name", notification.RecipientOwnerId);
        return View(notification);
    }

    [HttpPost("Edit/{id}")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(int id, [Bind("NotificationId,Title,Message,Type,IsRead,SentAt,RecipientOwnerId")] Notification notification)
    {
        if (id != notification.NotificationId) return NotFound();

        if (ModelState.IsValid)
        {
            try
            {
                _context.Update(notification);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Notifications.Any(e => e.NotificationId == id))
                    return NotFound();
                throw;
            }
            return RedirectToAction("Index");
        }

        ViewData["RecipientOwnerId"] = new SelectList(_context.Owners, "OwnerId", "Name", notification.RecipientOwnerId);
        return View(notification);
    }

    [HttpGet("Delete/{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var notification = await _context.Notifications
            .Include(n => n.RecipientOwner)
            .FirstOrDefaultAsync(m => m.NotificationId == id);
        if (notification == null) return NotFound();
        return View(notification);
    }

    [HttpPost("Delete/{id}"), ActionName("DeleteConfirmed")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        var notification = await _context.Notifications.FindAsync(id);
        if (notification != null)
        {
            _context.Notifications.Remove(notification);
            await _context.SaveChangesAsync();
        }
        return RedirectToAction("Index");
    }
}
